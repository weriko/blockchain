from __future__ import annotations
from bitcoinutils.setup import setup
from bitcoinutils.transactions import Transaction, TxInput, TxOutput
from bitcoinutils.keys import P2pkhAddress, PrivateKey
from bitcoinutils.script import Script



def create_tx(priv:str|PrivateKey, tx_ins:list, tx_outs:list, net:str='testnet', iswif = True):

    setup(net)
    if not isinstance(priv, PrivateKey):
      if iswif:
  
        priv = PrivateKey(priv)
      else:
        priv = PrivateKey(secret_exponent=priv)
    tx = Transaction(tx_ins, tx_outs)
    pub = priv.get_public_key()
    pub_addr = pub.get_address(compressed=True).to_string()
 
    from_addr = P2pkhAddress(pub_addr)
    sig = priv.sign_input( tx, 0, Script(['OP_DUP', 'OP_HASH160',
                                       from_addr.to_hash160(), 'OP_EQUALVERIFY',
                                       'OP_CHECKSIG']) )

    pub = priv.get_public_key().to_hex()
    for txin in tx_ins:
      txin.script_sig = Script([sig, pub])
      signed_tx = tx.serialize()


    return signed_tx

setup('testnet')
addr = P2pkhAddress('mkRXSUoYc18NWFfJz7nyqWzVY3vw7B76F5')
tx_ins = [TxInput('4adfc02617d432a503bdf8ed88e357cc2a099c4932ad9b0e68edb7f9a4363501', 1)]
tx_outs = [TxOutput(45000, Script(['OP_DUP', 'OP_HASH160', addr.to_hash160(),
                                  'OP_EQUALVERIFY', 'OP_CHECKSIG']) )]
priv = 'cPmtes3HGeWYfyrnWq2fySrjEQuRaGzyctR1SG7ymDcvv9Dowweo'
create_tx(priv, tx_ins, tx_outs)